#name: Java CI-CD  with Gradle
#
#on:
#  push:
#    branches: [ "demo/prod" ]
#  pull_request:
#    branches: [ "demo/prod" ]
#
#env:
#  S3_BUCKET_NAME: peerflow-example-bucket
#  RESOURCE_PATH: ./src/main/resources/application.yml
#  CODE_DEPLOY_APPLICATION_NAME: peerflow-codedeploy
#  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: peerflow-codedeploy-group
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#        shell: bash
#
#      - name: Build with Gradle
#        run: ./gradlew build
#        shell: bash
#
#      - name: Make zip file
#        run: zip -r ./$GITHUB_SHA .
#        shell: bash
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Upload to S3
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
#
#      - name: Code Deploy
#        run: |
#          aws deploy create-deployment \
#          --deployment-config-name CodeDeployDefault.AllAtOnce \
#          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
#          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip

name: Deploy to AWS EC2

on:
  push:
    branches: [ "demo/prod" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <YOUR_AWS_REGION>

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose

      - name: Build and deploy
        run: |
          docker-compose -f <YOUR_DOCKER_COMPOSE_FILE> up -d
